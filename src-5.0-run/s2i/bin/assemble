#!/bin/sh -e
#
# S2I assemble script for the 'dotnet-30-runtime' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# If the 'dotnet-30-runtime' assemble script is executed with the '-h' flag, print the usage.
if [[ "$1" == "-h" ]]; then
	exec /usr/libexec/s2i/usage
fi

# Restore artifacts from the previous build (if they exist).
#
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  mv /tmp/artifacts/. ./
fi

echo "Docker Info"
id
pwd

echo "ls -la .."
ls -la ..

echo "ls -la /tmp/src/"
ls -la /tmp/src/

echo "ls -la /opt/app-root/"
ls -la /opt/app-root

echo "End..."

echo "---> Installing application source..."
#cp -Rf /tmp/src/* ./

cd  /tmp/src/

echo "---> Building application from source..."


# restaurando packages

export DOTNET_CLI_HOME="/tmp/DOTNET_CLI_HOME"

echo "---> Download file..."
if [ "$DOWNLOAD_URL" != "" ] ; then wget $DOWNLOAD_URL -O app.tar.gz ; else echo '(log) DOWNLOAD_URL variable not set'; fi

echo "---> Publish from build..."
if [ "$DOWNLOAD_URL" != "" ] ; then tar -xf app.tar.gz ; rm -f app.tar.gz ; mv app_build/* /app ; else echo '(publish) DOWNLOAD_URL variable not set'; mkdir -p /app; fi

if [ "$PROJECT_DLL" != "" ] ; then echo 'PROJECT_DLL OK'; else echo '(RUN) PROJECT_DLL variable not set'; fi

if [ "$CUSTOM_CMD" != "" ] ; then  cd /app ; echo "#!/bin/sh -e" > custom.sh ; echo $CUSTOM_CMD >> custom.sh ; chmod +x custom.sh; ./custom.sh ; else echo '(RUN) CUSTOM_CMD variable not set'; fi

rm -fr /opt/app-root/* /tmp/src/*